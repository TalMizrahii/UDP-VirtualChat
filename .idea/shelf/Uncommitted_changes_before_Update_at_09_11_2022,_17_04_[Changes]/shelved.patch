Index: server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import socket\nimport sys\n\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver_port = str(sys.argv[1])\ns.bind(('', int(server_port)))\n\n# data_base = {address : (name, [messages list])}\ndata_base = {}\n# listed_members = [(address, [name]), (address, [name])]\nlisted_members = []\n\n\ndef in_data_base(address):\n    if data_base.get(address):\n        return True\n    return False\n\n\n# Sending to a new user message about all current members in the group.\ndef send_names(address):\n    name_msg = ''\n    for person in listed_members[::-1]:\n        name_msg += person[1][0] + \"\\n\"\n    name_msg = name_msg[:-1]\n    # Sending the message to the user.\n    s.sendto(name_msg.encode(), address)\n\n\ndef add_to_database(name, address):\n    # Checking if the dictionary is empty or not.\n    if data_base:\n        # If the database is not empty, add the notification about a new group member to all users.\n        for key in data_base:\n            data_base[key][1].append(name + \" has joined\")\n        # Sending the new member a message about all current listed members.\n        send_names(address)\n    else:\n        s.sendto(''.encode(), address)\n    # Adding the new user to the database.\n    data_base[address] = ([name], [])\n    listed_members.append((address, [name]))\n\n\n# Sending to all group members a message from a user.\ndef send_message_user(sorted_message, address):\n    # Getting The sender's name.\n    sender_name = data_base[address][0][0]\n    # appending to all group member the new message to the messages list.\n    for key in data_base:\n        # all user's, except the ine who sent the message.\n        if key != address:\n            data_base[key][1].append(sender_name + \": \" + sorted_message)\n\n\n# Changing the name of the user and updating all other group members.\ndef change_name(new_name, address):\n    # Saving the old name of the user.\n    old_name = data_base[address][0][0]\n    # Updating all users about the change.\n    for key in data_base:\n        # Add the message to all group members except the user.\n        if key != address:\n            data_base[key][1].append(old_name + \" changed his name to \" + new_name)\n    # Changing the user's name.\n    for person in listed_members:\n        if person[0] == address:\n            person[1][0] = new_name\n    data_base[address][0][0] = new_name\n\n\n# Removing a user from the database and updating all current group members.\ndef leave_group(address):\n    # Send the user an empty reply.\n    s.sendto(''.encode, address)\n    # Saving the user's name.\n    leaving_user_name = data_base[address][0][0]\n    # Deleting the user.\n    data_base.pop(address)\n    # Updating all current group members.\n    for key in data_base:\n        data_base[key][1].append(leaving_user_name + \" has left the group\")\n    # Removing the person from the member's list\n    for person in listed_members:\n        if person[0] == address:\n            listed_members.remove(person)\n            break\n\n\n# Update a specific client with all the saved message he missed.\ndef update_me(address):\n    # Init an empty message.\n    all_msg = ''\n\n    # Appending all the saved message to one string.\n    for msg in data_base[address][1]:\n        # Add the message with \\n.\n        all_msg = all_msg + msg + \"\\n\"\n\n    # Remove the last \\n from the complete message.\n    all_msg = all_msg[:-1]\n    # Sending the complete message to the client.\n    s.sendto(all_msg.encode(), address)\n    data_base[address][1].clear()\n\n\n# Indicate the client request and execute his request.\ndef switch(full_msg, address):\n    command_num = int(full_msg[2])\n    sorted_message = full_msg[4:-1]\n    # \"Switch case\"\n    # Fulfill the client request to join the group.\n    if command_num == 1:\n        add_to_database(sorted_message, address)\n        return True\n    # Fulfill the client request to send a message to the group.\n    elif command_num == 2:\n        update_me(address)\n        send_message_user(sorted_message, address)\n        return True\n    # Fulfill the client request to change is name.\n    elif command_num == 3:\n        update_me(address)\n        change_name(sorted_message, address)\n        return True\n    # Fulfill the client request to leave the group.\n    elif command_num == 4:\n        leave_group(address)\n        return True\n    elif command_num == 5:\n        update_me(address)\n        return True\n    # The default case when is request is not legal.\n    else:\n        return False\n\n\ndef validations(msg, addr1):\n    # DElete!!!!!!!!!!!!1 test\n    print(msg)\n    print(\"len of message = \" + str(len(msg)))\n\n\n    choice_num = msg[2]\n    # If the request is not by format or not in the manu range, return an error message.\n    if not choice_num.isnumeric() or not int(choice_num) in range(1, 6):\n        return False\n    # if the request is to join the group, but the user is already in it, return error.\n    if int(choice_num) == 1 and in_data_base(addr1):\n        return False\n    # If the request is to preform an action by a nonmember of the group (except joining the group), return error.\n    if not in_data_base(addr1) and int(choice_num) != 1:\n        return False\n    # If requests 4 or 5 is not by format\n    if (choice_num == '4' or choice_num == '5') and len(msg) != 4:\n        return False\n    # If the format for ops 1, 2 or 3 is not valid, return.\n    if choice_num == '1' or choice_num == '2' or choice_num == '3' and len(msg) < 5 and msg[3] != ' ':\n        return False\n    # If passed all validations, return True.\n    return True\n\n\nwhile True:\n    print(\"database =\", data_base)\n    # Receive data from everyone.\n    data, addr = s.recvfrom(1024)\n    # Store the data in a new string.\n    message = str(data)\n    if not validations(message, addr):\n        s.sendto(\"Illegal request\".encode(), addr)\n        continue\n    # If the request is valid, preform an action.\n    if not switch(message, addr):\n        s.sendto(\"Illegal request\".encode(), addr)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server.py b/server.py
--- a/server.py	(revision f93c31c522ceec829cda0544d7c762d0aa9a887c)
+++ b/server.py	(date 1668006290931)
@@ -140,7 +140,6 @@
     print(msg)
     print("len of message = " + str(len(msg)))
 
-
     choice_num = msg[2]
     # If the request is not by format or not in the manu range, return an error message.
     if not choice_num.isnumeric() or not int(choice_num) in range(1, 6):
@@ -155,7 +154,7 @@
     if (choice_num == '4' or choice_num == '5') and len(msg) != 4:
         return False
     # If the format for ops 1, 2 or 3 is not valid, return.
-    if choice_num == '1' or choice_num == '2' or choice_num == '3' and len(msg) < 5 and msg[3] != ' ':
+    if choice_num == '1' or choice_num == '2' or choice_num == '3' and len(msg) < 5 or msg[3] != ' ':
         return False
     # If passed all validations, return True.
     return True
